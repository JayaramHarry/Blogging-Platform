{"ast":null,"code":"import React,{useState,useEffect}from'react';import apiUrl from'../../apiConfig.js';import\"./style.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const PostForm=_ref=>{let{postId,onSubmit,onCancel,initialValues}=_ref;const[title,setTitle]=useState((initialValues===null||initialValues===void 0?void 0:initialValues.title)||'');const[content,setContent]=useState((initialValues===null||initialValues===void 0?void 0:initialValues.content)||'');useEffect(()=>{if(initialValues){// If initialValues are provided (for editing), set the form fields\nsetTitle(initialValues.title||'');setContent(initialValues.content||'');}},[initialValues]);// Creating new blog\nconst handleSubmit=async e=>{e.preventDefault();const postData={title,content};try{if(postId){const response=await fetch(\"\".concat(apiUrl,\"/posts/\").concat(postId),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(postData)});if(!response.ok){throw new Error('Failed to update post');}}else{const response=await fetch(\"\".concat(apiUrl,\"/posts\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(postData)});if(!response.ok){throw new Error('Failed to create post');}}setTitle('');setContent('');if(onSubmit){onSubmit(postId,postData);// Pass both postId and postData\n}}catch(error){console.error('Error creating/updating post:',error);}};return/*#__PURE__*/_jsxs(\"form\",{className:\"create-post-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"TITLE\",className:\"title-input\",type:\"text\",value:title,onChange:e=>setTitle(e.target.value)}),/*#__PURE__*/_jsx(\"textarea\",{value:content,onChange:e=>setContent(e.target.value),rows:\"20\",style:{width:'100%'},placeholder:\"Write your blog content here...\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-outline-success \",type:\"submit\",children:postId?'Update':'Submit'}),postId&&/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-outline-danger m-3\",type:\"button\",onClick:onCancel,children:\"Cancel\"})]});};export default PostForm;","map":{"version":3,"names":["React","useState","useEffect","apiUrl","jsx","_jsx","jsxs","_jsxs","PostForm","_ref","postId","onSubmit","onCancel","initialValues","title","setTitle","content","setContent","handleSubmit","e","preventDefault","postData","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","error","console","className","children","placeholder","type","value","onChange","target","rows","style","width","onClick"],"sources":["C:/Users/91789/OneDrive/Desktop/simple-blogging-platform/Blogging-Platform/frontend/src/components/PostForm/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport apiUrl from '../../apiConfig.js';\r\nimport \"./style.css\"\r\n\r\nconst PostForm = ({ postId, onSubmit, onCancel, initialValues }) => {\r\n  const [title, setTitle] = useState(initialValues?.title || '');\r\n  const [content, setContent] = useState(initialValues?.content || '');\r\n\r\n  useEffect(() => {\r\n    if (initialValues) {\r\n      // If initialValues are provided (for editing), set the form fields\r\n      setTitle(initialValues.title || '');\r\n      setContent(initialValues.content || '');\r\n    }\r\n  }, [initialValues]);\r\n\r\n  // Creating new blog\r\n  const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        const postData = { title, content };\r\n    \r\n        try {\r\n          if (postId) {\r\n            const response = await fetch(`${apiUrl}/posts/${postId}`, {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify(postData),\r\n            });\r\n    \r\n            if (!response.ok) {\r\n              throw new Error('Failed to update post');\r\n            }\r\n          } else {\r\n            const response = await fetch(`${apiUrl}/posts`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify(postData),\r\n            });\r\n    \r\n            if (!response.ok) {\r\n              throw new Error('Failed to create post');\r\n            }\r\n          }\r\n    \r\n          setTitle('');\r\n          setContent('');\r\n\r\n          if (onSubmit) {\r\n            onSubmit(postId, postData); // Pass both postId and postData\r\n          }\r\n        } catch (error) {\r\n          console.error('Error creating/updating post:', error);\r\n        }\r\n\r\n        \r\n\r\n      };\r\n\r\n  return (\r\n    <form className='create-post-form' onSubmit={handleSubmit}>\r\n      {/*Title input field*/}\r\n      <input\r\n      placeholder='TITLE'\r\n        className='title-input'\r\n        type=\"text\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n\r\n      {/* Full-page textarea for content */}\r\n      <textarea\r\n        value={content}\r\n        onChange={(e) => setContent(e.target.value)}\r\n        rows=\"20\"\r\n        style={{ width: '100%' }}\r\n        placeholder=\"Write your blog content here...\"\r\n      />\r\n\r\n      <button className=\"btn btn-outline-success \" type=\"submit\">{postId ? 'Update' : 'Submit'}</button>\r\n      {postId && <button className=\"btn btn-outline-danger m-3\" type=\"button\" onClick={onCancel}>Cancel</button>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}